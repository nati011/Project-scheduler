const char* get_d_date()
{
    time_t now = time(0);
    return ctime(&now);
}
void create_file(const char* filename)
{
    ofstream f(filename);
    if(!f.is_open())
    {
       cout<<"file creation failed";
       exit(1);
    }
   f.close();
}
void int_write(const char *filename, int num)
{
    FILE *fptr;
    fptr = fopen(filename,"w");

    if(fptr == NULL)
    {
        cout<<"operation failed";
        exit(1);
    }

    putw(num,fptr);
    fclose(fptr);
    return;
}
int int_read(const char* filename)
{
    FILE *fptr;
    fptr = fopen(filename,"r");

    if(fptr==NULL)
    {
        cout<<"operation failed";
        exit(1);
    }

    int num = getw(fptr);
    fclose(fptr);
    return num;
}
int generate_ID(const char* from_file)
{
    //IDs are given sequentially and a new ID is generated by finding out the last ID number
    //read last ID
    int ret = int_read(from_file);
    ret+=1;
    int_write(from_file,ret);
    return ret;
}
//house keeping info
int get_proj_count()
{
    return int_read("proj_count");
}
void add_proj_count()
{
    int emp =  emp_count();
    int_w_write("proj_count", emp+1);
}
void sub_proj_count()
{
    int emp =  emp_count();
    int_w_write("proj_count", emp-1);
}

int add_proj(proj_supply &p)
{
    //generate ID
    proj_info p_info;
    p_info->pid = generate_ID("ID_generate_file");

    ofstream fstr;
    fstr.open("proj", ios::out | ios::app | ios:: binary );
    if(!fstr.is_open())
    {
        cout<<"File operation failed";
        exit(1);
    }
    //copy

    p_info->description = p.description;
    p_info->priority = p.priority;
    p_info->bt = p.bt;
    p_info->d_and_t = get_date();

    //block write to file
    fstr.write((char *) &p_info, sizeof(p_info));
    fstr.close();

    //add proj count
    add_proj_count();

    return p_info.pid;
}

proj_info search_proj(int pid)
{
    int e = get_proj_count();
    proj_info p_info;
    fstream fstr;

   fstr.open("proj", ios::in | ios:: binary );
    if(!fstr.is_open())
    {
        cout<<"File could not be opened";
        exit(1);
    }
    while(fstr.read((char *)&p_info,sizeof(proj_info)))
    {
        //find proj and return struct
        if(p_info.pid == pid)
        {
            return p_info;
        }
    }
}

int rm_proj(int id, const char* reason)
{

    // removal details
    removal rm;

    rm.reason = reason;
    rm.date_of_removal = get_date();

    //generate new ID
    int new_ID = generate_ID("removed_projects_ID_list")+1;
    create_file((const char*)new_ID);

    //the removed projects will be stored in a new file
    fstream fstr_new;
    fstr.open((const char*)new_ID, ios::out | ios:: binary );
    if(!fstr.is_open())
    {
        cout<<"File could not be opened";
        exit(1);
    }

    //get proj
    proj_info proj = search_proj(id);


    //move to removed employees list
    fstr.write((char *) &proj, sizeof(proj_info));
    fstr.write((char *) &rm, sizeof(removal));
    fstr.close();


    fstream fstr_old;

    fstr_old.open("proj", ios::out | ios::in | ios:: binary );
    if(!fstr_old.is_open())
    {
        cout<<"File could not be opened";
        exit(1);
    }
    //temp file
    create_file("temp");
    fstr_tmp.open("temp", ios::out | ios::in | ios:: binary );
    if(!fstr_tmp.is_open())
    {
        cout<<"File could not be opened";
        exit(1);
    }
    //copy to temp
    while(fstr_old.read((char *)&proj,sizeof(proj_info)))
    {

       if(proj.pid != id )
       {
            fstr_tmp.write((char *)&proj, sizeof(proj_info));
       }
    }
    //copy back to proj and update record
    while(fstr_tmp.read((char *)&proj,sizeof(proj_info)))
    {
        fstr_old.write((char *)&proj, sizeof(proj_info));
    }
    fstr_tmp.close();
    ///remove temp file

    //decrease employee count
    sub_proj_count();
    return new_ID;

}

void info()
{
    proj_info p_info;
    fstream fstr;

   fstr.open("proj", ios::in | ios:: binary );

   if(!fstr.is_open())
   {
       cout<<"File could not be opened";
       exit(1);
   }

   while(fstr.read((char *)&p_info,sizeof(proj_info)))
   {
        cout<<"----"<<get_proj_count()<<"----"<<endl;
        cout<<"ID: \t"<<p_info.pid<<endl;
        cout<<"Description: \t"<<p_info.description<<endl;
        cout<<"burst time: \t"<<p_info.bt<<endl;
        cout<<"Priority: \t"<<p_info.priority<<endl<<endl<<endl;
        cout<<"commit date: \t"<<p_info.d_and_t<<endl;
    }


    fstr.close();
}
